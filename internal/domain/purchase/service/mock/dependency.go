// Code generated by MockGen. DO NOT EDIT.
// Source: dependency.go
//
// Generated by this command:
//
//	mockgen -source dependency.go -destination mock/dependency.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	merch "github.com/YrWaifu/test_go_back/internal/domain/merch"
	purchase "github.com/YrWaifu/test_go_back/internal/domain/purchase"
	user "github.com/YrWaifu/test_go_back/internal/domain/user"
	storage "github.com/YrWaifu/test_go_back/internal/domain/user/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockPurchaseStorage is a mock of PurchaseStorage interface.
type MockPurchaseStorage struct {
	ctrl     *gomock.Controller
	recorder *MockPurchaseStorageMockRecorder
	isgomock struct{}
}

// MockPurchaseStorageMockRecorder is the mock recorder for MockPurchaseStorage.
type MockPurchaseStorageMockRecorder struct {
	mock *MockPurchaseStorage
}

// NewMockPurchaseStorage creates a new mock instance.
func NewMockPurchaseStorage(ctrl *gomock.Controller) *MockPurchaseStorage {
	mock := &MockPurchaseStorage{ctrl: ctrl}
	mock.recorder = &MockPurchaseStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPurchaseStorage) EXPECT() *MockPurchaseStorageMockRecorder {
	return m.recorder
}

// BeginPurchase mocks base method.
func (m *MockPurchaseStorage) BeginPurchase(ctx context.Context, fn func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginPurchase", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// BeginPurchase indicates an expected call of BeginPurchase.
func (mr *MockPurchaseStorageMockRecorder) BeginPurchase(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginPurchase", reflect.TypeOf((*MockPurchaseStorage)(nil).BeginPurchase), ctx, fn)
}

// CreatePurchase mocks base method.
func (m *MockPurchaseStorage) CreatePurchase(ctx context.Context, userID, merchID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePurchase", ctx, userID, merchID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePurchase indicates an expected call of CreatePurchase.
func (mr *MockPurchaseStorageMockRecorder) CreatePurchase(ctx, userID, merchID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePurchase", reflect.TypeOf((*MockPurchaseStorage)(nil).CreatePurchase), ctx, userID, merchID)
}

// ListByUserID mocks base method.
func (m *MockPurchaseStorage) ListByUserID(ctx context.Context, userID string) ([]purchase.Purchase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUserID", ctx, userID)
	ret0, _ := ret[0].([]purchase.Purchase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUserID indicates an expected call of ListByUserID.
func (mr *MockPurchaseStorageMockRecorder) ListByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUserID", reflect.TypeOf((*MockPurchaseStorage)(nil).ListByUserID), ctx, userID)
}

// MockUserStorage is a mock of UserStorage interface.
type MockUserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockUserStorageMockRecorder
	isgomock struct{}
}

// MockUserStorageMockRecorder is the mock recorder for MockUserStorage.
type MockUserStorageMockRecorder struct {
	mock *MockUserStorage
}

// NewMockUserStorage creates a new mock instance.
func NewMockUserStorage(ctrl *gomock.Controller) *MockUserStorage {
	mock := &MockUserStorage{ctrl: ctrl}
	mock.recorder = &MockUserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStorage) EXPECT() *MockUserStorageMockRecorder {
	return m.recorder
}

// GetById mocks base method.
func (m *MockUserStorage) GetById(ctx context.Context, id string, opts storage.GetOptions) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id, opts)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockUserStorageMockRecorder) GetById(ctx, id, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUserStorage)(nil).GetById), ctx, id, opts)
}

// IncrementBalance mocks base method.
func (m *MockUserStorage) IncrementBalance(ctx context.Context, username string, inc int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementBalance", ctx, username, inc)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementBalance indicates an expected call of IncrementBalance.
func (mr *MockUserStorageMockRecorder) IncrementBalance(ctx, username, inc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementBalance", reflect.TypeOf((*MockUserStorage)(nil).IncrementBalance), ctx, username, inc)
}

// MockMerchStorage is a mock of MerchStorage interface.
type MockMerchStorage struct {
	ctrl     *gomock.Controller
	recorder *MockMerchStorageMockRecorder
	isgomock struct{}
}

// MockMerchStorageMockRecorder is the mock recorder for MockMerchStorage.
type MockMerchStorageMockRecorder struct {
	mock *MockMerchStorage
}

// NewMockMerchStorage creates a new mock instance.
func NewMockMerchStorage(ctrl *gomock.Controller) *MockMerchStorage {
	mock := &MockMerchStorage{ctrl: ctrl}
	mock.recorder = &MockMerchStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMerchStorage) EXPECT() *MockMerchStorageMockRecorder {
	return m.recorder
}

// GetByName mocks base method.
func (m *MockMerchStorage) GetByName(ctx context.Context, name string) (merch.Merch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(merch.Merch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockMerchStorageMockRecorder) GetByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockMerchStorage)(nil).GetByName), ctx, name)
}
