// Code generated by MockGen. DO NOT EDIT.
// Source: dependency.go
//
// Generated by this command:
//
//	mockgen -source dependency.go -destination mock/dependency.go
//

// Package mock_purchase is a generated GoMock package.
package mock_purchase

import (
	context "context"
	reflect "reflect"

	service "github.com/YrWaifu/test_go_back/internal/domain/purchase/service"
	gomock "go.uber.org/mock/gomock"
)

// MockPurchaseService is a mock of PurchaseService interface.
type MockPurchaseService struct {
	ctrl     *gomock.Controller
	recorder *MockPurchaseServiceMockRecorder
	isgomock struct{}
}

// MockPurchaseServiceMockRecorder is the mock recorder for MockPurchaseService.
type MockPurchaseServiceMockRecorder struct {
	mock *MockPurchaseService
}

// NewMockPurchaseService creates a new mock instance.
func NewMockPurchaseService(ctrl *gomock.Controller) *MockPurchaseService {
	mock := &MockPurchaseService{ctrl: ctrl}
	mock.recorder = &MockPurchaseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPurchaseService) EXPECT() *MockPurchaseServiceMockRecorder {
	return m.recorder
}

// BuyMerch mocks base method.
func (m *MockPurchaseService) BuyMerch(ctx context.Context, req service.BuyRequest) (service.BuyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyMerch", ctx, req)
	ret0, _ := ret[0].(service.BuyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuyMerch indicates an expected call of BuyMerch.
func (mr *MockPurchaseServiceMockRecorder) BuyMerch(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyMerch", reflect.TypeOf((*MockPurchaseService)(nil).BuyMerch), ctx, req)
}
